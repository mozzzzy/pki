#
# default section
#
[default]
name          = root-ca
domain_suffix = dev.local
aia_url       = http://$name.$domain_suffix/$name.crt
crl_url       = http://$name.$domain_suffix/$name.crl
ocsp_url      = http://$name.$domain_suffix:9080

#
# section for req command
#
[req]
# Specifies the default key size in bits.
# This value is used when req command create private key with csr.
default_bits = 4096

# If this is set to no then if a private key is generated it is not encrypted.
encrypt_key = yes

# This option specifies the digest algorithm to use.
# Possible values include md5 sha1 mdc2. If not present then MD5 is used.
# This option can be overridden on the command line.
default_md = sha256

# Create csr without prompt.
prompt = no

# This specifies the section containing the distinguished name fields to prompt for when
# generating a certificate or certificate request.
distinguished_name = ca_dn

# This specifies the configuration file section containing a list of extensions
# to add to the CSR.
# The value of this section can be overridden by the -reqexts option.
req_extensions = ca_ext

#
# Section containing the distinguished name fields.
# This section is used in req section.
#
[ca_dn]
countryName         = "JP"
stateOrProvinceName = "Tokyo"
organizationName    = "Example"
commonName          = "Root CA"

#
# Section containing a list of extensions to add.
# This section is used in req section.
#
[ca_ext]
# authorityInfoAccess extension ...
#   (https://tools.ietf.org/html/rfc5280#section-4.2.2.1)
#   The authority information access extension indicates how to access
#   information and services for the issuer of the certificate in which
#   the extension appears.
authorityInfoAccess = @issuer_info

# basicConstraints extension ...
#    (https://tools.ietf.org/html/rfc5280#section-4.2.1.9)
#    The basic constraints extension identifies whether the subject of the
#    certificate is a CA and the maximum depth of valid certification
#    paths that include this certificate.
#
# Following value specifies that the requested certificate is for ca,
# and the maximu depth of valid certificate is 0. (i.e. The ca can't create sub ca certificate.)
basicConstraints = critical,CA:true,pathlen:0

# crlDistributionPoints extension ...
#   (https://tools.ietf.org/html/rfc5280#section-4.2.1.13)
#   The CRL distribution points extension identifies how CRL information is obtained.
crlDistributionPoints = @crl_info

# keyUsage extension ...
#   (https://tools.ietf.org/html/rfc5280#section-4.2.1.3)
#   The key usage extension defines the purpose (e.g., encipherment,
#   signature, certificate signing) of the key contained in the
#   certificate.
keyUsage = critical,keyCertSign,cRLSign

# subjectKeyIdentifier extensions ...
#   (https://tools.ietf.org/html/rfc5280#section-4.2.1.2)
#   The subject key identifier extension provides a means of identifying
#   certificates that contain a particular public key.
#   this extension MUST appear in all conforming CA certificates.
subjectKeyIdentifier = hash

#
# Section containing crl info.
# This section is used in ca_ext section.
#
[crl_info]
URI.0 = $crl_url

#
# Section containing issuer info.
# This section is used in ca_ext section.
#
[issuer_info]
caIssuers;URI.0 = $aia_url
OCSP;URI.0 = $ocsp_url
