# man config を見ると、[default] は付けなくてよい。
# ファイルの初めから最初のsection 名が来るまでが default section として扱われる。
[default]
name             = root-ca
domain_suffix    = example.com
aia_url          = http://$name.$domain_suffix/$name.crt
crl_url          = http://$name.$domain_suffix/$name.crl
ocsp_url         = http://ocsp.$name.$domain_suffix:9080
default_ca       = ca_default
name_opt         = utf8,esc_ctrl,multiline,lname,align

[ca_dn]   # "dn" は distinguished name の略か？
countryName      = "GB"
organizationName = "Example"
commonName       = "Root CA"

#
# ここから CA を直接制御している設定
#
[ca_default]
home             = .
database         = $home/db/index
serial           = $home/db/serial
crlnumber        = $home/db/crlnumber
certificate      = $home/$name.crt
private_key      = $home/private/$name.key
RANDFILE         = $home/private/random
new_certs_dir    = $home/certs
unique_subject   = no
copy_extensions  = none
default_days     = 3650               # Root CA の証明書の有効期限を10年に設定
default_crl_days = 365                # CRLの更新は1年おき
default_md       = sha256             # 電子署名のアルゴリズム
policy           = policy_c_o_match   # CA から発行される全ての証明書には、
                                      # CA と同じ countryName フィールトと
                                      # organizationName フィールドが含められるようにする。

[policy_c_o_match]
countryName            = match
stateOrProvinceName    = optional
organizationName       = match
organizationalUnitName = optional
commonName             = supplied
emailAddress           = optional

#
# ここから req コマンドの設定
# req コマンドは事故署名証明書の生成時に一度だけ使用される。
#
[req]
default_bits       = 4096
encrypt_key        = yes
default_md         = sha256
utf8               = yes
string_mask        = utf8only
prompt             = no
distinguished_name = ca_dn
req_extensions     = ca_ext     # 拡張に関しては ca_ext セクションの内容を使用

[ca_ext]
# Basic Constraints 拡張... CA証明書であること、および下位CAの証明書パスの深さを
#                           制御するために使用する
basicConstraints     = critical,CA:true    # critical, はこの設定が必ず認識され、
                                           # 正しく処理されなければならないことを意味する。
# Key Usage  拡張... 証明書の用途を既定。
keyUsage             = critical,keyCertSign,cRLSign
subjectKeyIdentifier = hash

#
# ここから CA が発行する証明書の構築時に利用される設定
#
[sub_ca_ext]
# Authority Information Access 拡張... 証明書を発行する CA が提供する付加的な情報やサービスへのアクセス方法を示すための拡張。
#                                      OCSPレスポンダの場所(URL)など。
authorityInfoAccess    = @issuer_info
# Authority Key Identifier 拡張... 証明書に対する署名のカギを一意に特定できる識別子を含む拡張。よくわからない。
authorityKeyIdentifier = keyid:always
basicConstraints       = critical,CA:true,pathlen:0   # 生成する証明書が CA のものであること、
                                                      # 更に下位の CA は許可しないことを指定。
crlDistributionPoints  = @crl_info                    # CRL 配布先の情報はcrl_info セクションを参照
# Extended Key Usage 拡張... 公開鍵の用途を更に柔軟に決定したり制限したりできるように
#                            任意の用途を追加で指定できるようにする拡張。
extendedKeyUsage       = clientAuth,serverAuth        # sub CA の発行する証明書の用途は
                                                      # TLS のクライアント認証、サーバ認証。
keyUsage               = critical,keyCertSign,cRLSign
# Name Constrains 拡張... CＡ が証明書を発行できる主体に制約を課すための拡張
nameConstraints        = @name_constraints
subjectKeyIdentifier   = hash

[crl_info]
URI.0 = $crl_url

[issuer_info]
caIssuers;URI.0 = $aia_url
OCSP;URI.0 = $ocsp_url

[name_constraints]
permitted;DNS.0 = example.com
permitted;DNS.1 = example.org
excluded;IP.0   = 0.0.0.0/0.0.0.0                 # 除外する ip
excluded;IP.1   = 0:0:0:0:0:0:0:0/0:0:0:0:0:0:0:0 # 除外する ip

# ここから OCSP レスポンスに対する署名用の証明書で使われる拡張を指定
[ocsp_ext]
authorityKeyIdentifier = keyid:always
basicConstraints       = critical,CA:false
extendedKeyUsage       = OCSPSigning
keyUsage               = critical,digitalSignature
subjectKeyIdentifier   = hash
